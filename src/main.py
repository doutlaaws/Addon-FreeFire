import website_requests as r
import threading
import logging
import sleekxmpp
import sys
import multiprocessing
import time
import pywinstyles
import os
import pickle as cPickle
from concurrent.futures import ThreadPoolExecutor
from queue import Queue, Empty
from PyQt6.QtWidgets import QApplication, QMainWindow,  QWidget, QLabel,QPushButton,QLineEdit,QHBoxLayout,QVBoxLayout,QFormLayout,QMenu,QTreeWidget,QTreeWidgetItem,QFrame, QListWidget
from PyQt6.QtCore import Qt, QObject, pyqtSignal, QTimer
from PyQt6.QtGui import QIcon, QAction, QPixmap, QColor, QKeySequence, QFontDatabase, QFont, QCursor



class Jabber(sleekxmpp.ClientXMPP):
    def __init__(self, jid, password):
        super().__init__(jid, password)
        logging.basicConfig(level=logging.DEBUG, format='%(levelname)-8s %(message)s')

        self.add_event_handler("session_start", self.start)
        self.add_event_handler("message", self.message)
        self.add_event_handler("presence_subscribe", self.presence_subscribe)
        self.add_event_handler("presence_unsubscribe", self.presence_unsubscribe)
        self.add_event_handler("presence_subscribed", self.presence_subscribed)
        self.add_event_handler("presence_unsubscribed", self.presence_unsubscribed)
        self.add_event_handler("ping", self.handle_ping, threaded=True)

    def start(self, event):
        self.send_presence()
        self.get_roster()
        logging.info("Bot started and roster retrieved.")

    def message(self, msg):
        logging.info(f"Message received: {msg['body']}")
        if msg['type'] in ('chat', 'normal'):
            msg.reply(f"Thanks for sending\n{msg['body']}").send()
            logging.info("Reply sent.")

    def handle_ping(self, iq):
        response = self.Iq()
        response.set_type('result')
        response.set_to(iq['from'])
        response.set_id(iq['id'])
        response.send()
        logging.info(f"Ping response sent to {iq['from']}")

    def presence_subscribe(self, presence):
        self.send_presence_subscription(pto=presence['from'], ptype='subscribed')
        self.send_presence_subscription(pto=presence['from'], ptype='subscribe')
        logging.info(f"Subscription request from {presence['from']} accepted.")

    def presence_unsubscribe(self, presence):
        self.send_presence_subscription(pto=presence['from'], ptype='unsubscribed')
        logging.info(f"Unsubscribed from {presence['from']}")

    def presence_subscribed(self, presence):
        logging.info(f"Subscription to {presence['from']} confirmed.")

    def presence_unsubscribed(self, presence):
        logging.info(f"Unsubscription from {presence['from']} confirmed.")


class Workers:
    def __init__(self):
        self.available_requests = Queue()
        self.requests = [r.UniPin(), r.Codashop(), r.TokoGame(), r.DuniaGames(), r.TopUp(),
                         r.IndoFlazz(), r.LatomStore(), r.MvStore(), r.YoggStore(), r.DiamondStore(), r.TopupGim(),
                         r.TopUpYok(), r.SungSaja(), r.MatchaShop(), r.IsiGameStore(), r.FsGameshop(), r.DigiPlay(),
                         r.VogAon(), r.RozezShop(), r.VocaGame()]

        for req in self.requests:
            self.available_requests.put(req)

        self.user_ids = [
            "9243712661",
            "8939772753",
            "9268373704",
            "2255021097",
            "1079478287",
            "6579686872",
            "7459648673",
            "1839226535",
            "7550566505",
            "7668095588",
            "7531859244",
            "3108623283",
            "5261379525",
            "1079478287",
            "9077888227",
            "7691179771",
            "7739654730",
            "5945439552",
            "1900971003",
            "3977939011",
            "9243384639",
            "9160078526",
            "7556678062",
            "7782989727",
            "6822817599",
            "6259794327",
            "8171345936",
            "8125118824",
            "9054067489",
            "3459623421",
            "9022955353",
            "2064722563",
            "3518150405",
            "5638091200",
            "3897461895",
            "8209382380",
            "7549235881",
            "7840084793",
            "413287075",
            "7433105219",
            "7451471428",
            "2293538712",
            "1018428393",
            "7631246299",
            "7718425540",
            "3449187442",
            "2808622928",
            "2021463337",
            "9227199434",
            "1990843317",
            "7441808048",
            "4017660014",
            "7975451600",
            "8592161573",
            "7736085683",
            "9261868368",
            "955351559",
            "7474018577",
            "7587488536",
            "6761792277",
            "7937026102",
            "2400749689",
            "8854205248",
            "7378312345",
            "8327219188",
            "8671075191",
            "4223973151",
            "5075127925",
            "9190514623",
            "1863388081",
            "4526027430",
            "8709086659",
            "9013732907",
            "5881425019",
            "8108164819",
            "6933967549",
            "3441754223",
            "5847980969",
            "9104509042",
            "8991790120",
            "5646036692",
            "8907451418",
            "3028342456",
            "9013732907",
            "8613107500",
            "1088999400",
            "6882116584",
            "9236149370",
            "7698888799",
            "9179887059",
            "7586376238",
            "6848444349",
            "9188501928",
            "8408982576",
            "7912434407",
            "263391095",
            "6577424959",
            "5722926679",
            "7602287867",
            "2174702499",
            "8468004713",
            "9193078429",
            "2324395938",
            "7712859892",
            "8208636214",
            "6167867543",
            "9179887059",
            "2880567183",
            "1649081881",
            "7233791574",
            "8276454853",
            "7515347929",
            "3418508203",
            "7578492611",
            "2214270671",
            "1954744340",
            "8947596467",
            "6435719082",
            "7775388896",
            "1518161807",
            "7245945616",
            "2263062950",
            "8721896523",
            "7691351658",
            "8595725848",
            "2421946674",
            "6329284910",
            "1497871087",
            "8871501901",
            "924552807",
            "8797658468",
            "6684648732",
            "7883785800",
            "2224822683",
            "1658500842",
            "6397294340",
            "2484887582",
            "7060777579",
            "2295624627",
            "7604467329",
            "8982705619",
            "7776638020",
            "8548642610",
            "2317491369",
            "7736649575",
            "7745450801",
            "8952153402",
            "8666335540",
            "7659615109",
            "8479244333",
            "2305569715",
            "2613204743",
            "979558466",
            "2507473511",
            "1756214255",
            "119091702",
            "2851746124",
            "8508536506",
            "2063130831",
            "7509667869",
            "648710167",
            "8656184295",
            "3723504874",
            "8782746551",
            "9093864015",
            "578924611",
            "5430100241",
            "7174675719",
            "3703509540",
            "8606170618",
            "2061591694",
            "7653810453",
            "1903792524",
            "7680814479",
            "505064052",
            "7670767153",
            "7390076337",
            "993512373",
            "8875089733",
            "2163540747",
            "9108554425",
            "9070919292",
            "5689354767",
            "2146221828",
            "7546287784",
            "7212213052",
            "3228856411",
            "4985016771",
            "6146423609",
            "9042687138",
            "7597021314",
            "6540594495",
            "8618593412",
            "2795283032",
            "6002912497",
            "346566978",
            "595209398",
            "7685119410",
            "8181882130",
            "8125901153",
            "9146003814",
            "6465540109",
            "3584346659",
            "578924611",
            "2380038585",
            "9079606972",
            "6522207954",
            "8802392694",
            "7719425738",
            "8731835006",
            "9028186563",
            "7694210779",
            "8283090254",
            "8572327494",
            "8125901153",
            "8879985596",
            "7964014136",
            "9113825428",
            "7640706127",
            "2643431704",
            "2639722410",
            "9087943280",
            "3695000667",
            "8484539610",
            "7252621285",
            "8544034990",
            "9154926091",
            "8244454460",
            "6237608680",
            "6002912497",
            "8875293648",
            "5501878891",
            "8786469391",
            "7443994244",
            "2355760061",
            "8949911388",
            "1008106439",
            "8605405718",
            "6543421028",
            "452944514",
            "8704841783",
            "5865942519",
            "7142954181",
            "1558306904",
            "2133748189",
            "1207169267",
            "3080913506",
            "2781250248",
            "9120376236",
            "8974185807",
            "8998552863",
            "8145707001",
            "8609919185",
            "2913455277",
            "8537270559",
            "8995378157",
            "221998432",
            "8621449947",
            "2550745600",
            "8821598159",
            "7360191425",
            "8604940095",
            "2205746329",
            "7616886128",
            "7959776036",
            "5567594069",
            "8597637083",
            "1683409485",
            "1793901977",
            "9065521712",
            "7387132696",
            "1424217780",
            "4625715863",
            "8104569334",
            "1285642323",
            "7230851429",
            "7972974955",
            "7896399826",
            "230435546",
            "2628840188",
            "4316564754",
            "2417769223",
            "9267089815",
            "2600198220",
            "2213188294",
            "286118924",
            "6564634335",
            "4189952846",
            "9170478691",
            "744980125",
            "2476635779",
            "2084990060",
            "3221280512",
            "8446130423",
            "2076228172",
            "6911500869",
            "8856254072",
            "6874279056",
            "2452030521",
            "6521139759",
            "8470838499",
            "6488945271",
            "8527798018",
            "2915534821",
            "3055922229",
            "4295340558",
            "1815683348",
            "6911500869",
            "3607276147",
            "8895596704",
            "8839756177",
            "540439560",
            "9082101230",
            "7578346493",
            "2741118042",
            "9197466116",
            "3176663946",
            "7710358736",
            "8977246011",
            "2583610282",
            "548249468",
            "402451954",
            "7088550488",
            "8903542811",
            "3144679543",
            "9143199063",
            "6080918424",
            "7974873209",
            "563459227",
            "3636338093",
            "9005097880",
            "7843631320",
            "6659264170",
            "2517966686",
            "7326216267",
            "8867311455",
            "1992493479",
            "8280016084",
            "8451640870",
            "7447857994",
            "6880006100",
            "9017308362",
            "8573024808",
            "9139448757",
            "6628955122",
            "548249468",
            "6527400726",
            "2198060982",
            "2452251853",
            "7658890763",
            "8889388686",
            "1872287431",
            "5571691514",
            "2848728200",
            "7882512508",
            "9200813813",
            "8248031142",
            "2123604100",
            "8124149722",
            "6917546680",
            "4389379803",
            "8708386871",
            "548249468",
            "5579030710",
            "1975416012",
            "1865731573",
            "8972193419",
            "8816182020",
            "7819791097",
            "7976549704",
            "249820988",
            "3305013138",
            "1818868619",
            "5877703167",
            "6629421659",
            "8957862586",
            "8301980359",
            "2636161291",
            "8908830629",
            "8609153789",
            "8890591924",
            "7048213140",
            "5370024232",
            "6628800479",
            "8334971608",
            "387853061",
            "8435578274",
            "1931855449",
            "7929647628",
            "3555571377",
            "8972193419",
            "993374555",
            "5517960260",
            "2071585596",
            "8617255575",
            "3159995677",
            "2650928296",
            "8885932767",
            "8825126374",
            "6134420553",
            "1705805325",
            "8047163848",
            "9239914251",
            "9192554686",
            "8885932767",
            "8509657621",
            "9206783710",
            "6120735238",
            "8055290272",
            "2565891187",
            "4065908014",
            "8499384205",
            "1658500842",
            "48709895",
            "8034079763",
            "9178876913",
            "6990873100",
            "7473308202",
            "5601257621",
            "8295862184",
            "8748971800",
            "9046910283",
            "5580065184",
            "8871211394",
            "7811121453",
            "3189090094",
            "7542004205",
            "2192208703",
            "666280076",
            "8846974580",
            "9199312442",
            "8734518968",
            "4982591612",
            "6867531223",
            "5571061235",
            "9045903620",
            "3002590314",
            "8051079716",
            "2097611705",
            "776547697",
            "8862108458",
            "8075865409",
            "1668633562",
            "3916599429",
            "6999053884",
            "3863109159",
            "5911293359",
            "8888929501",
            "9258501806",
            "8643886197",
            "3125095431",
            "1481854550",
            "7178623634",
            "7632471591",
            "6453779126",
            "6482340592",
            "9218009157",
            "7707877438",
            "8507510639",
            "6564251907",
            "8885156507",
            "910232204",
            "6040891945",
            "3902660959",
            "679934747",
            "8433012963",
            "7992716948",
            "2021221049",
            "6433993146",
            "2244402309",
            "1616215457",
            "8500481535",
            "4282858024",
            "990623184",
            "8992310569",
            "3701252140",
            "671552887",
            "6554990069",
            "9261868368",
            "6731942690",
            "8367659134",
            "4702186190",
            "9026511802",
            "8731132742",
            "7744205989",
            "2286500393",
            "4299302212",
            "8580327463",
            "1696976450",
            "1848430390",
            "7401599302",
            "9261868368",
            "2860073302",
            "1294553440",
            "8181577976",
            "7640725521",
            "2608179631",
            "1120096652",
            "9032295129",
            "9068908865",
            "7102182567",
            "8656400641",
            "2439136089",
            "2625097506",
            "1863760683",
            "8315640198",
            "2050442543",
            "958017386",
            "7527631469",
            "6614761088",
            "2487512907",
            "368162484",
            "7065147206",
            "778997999",
            "9168401197",
            "9042221701",
            "8136326841",
            "7065147206",
            "9022140959",
            "2462021661",
            "7185558356",
            "1972740823",
            "9270540910",
            "2494765530",
            "2778765933",
            "6087424969",
            "2564903407",
            "9065570375",
            "8712006000",
            "9031231514",
            "2494765530",
            "8801128150",
            "2668271325",
            "7832516813",
            "7885105524",
            "2451877556",
            "207454068",
            "8512380746",
            "2542798696",
            "3044128796",
            "3394605478",
            "7261620071",
            "8597573802",
            "9165945594",
            "2079017949",
            "2275398579",
            "2653662522",
            "8988000700",
            "4176298008",
            "1830826257",
            "229721941",
            "1017048988",
            "2708533033",
            "6184889504",
            "2551095486",
            "394925129",
            "8205307856",
            "7066786948",
            "7574617346",
            "9284783834",
            "7442405953",
            "2503048404",
            "8618496090",
            "8096435361",
            "8771838172",
            "3591898672",
            "8527904587",
            "8840118967",
            "1870819908",
            "95164118",
            "1661095210",
            "8609950693",
            "2872671322",
            "9297753841",
            "8835634115",
            "7463444246",
            "4374386290",
            "7654865929",
            "7426435868",
            "1072999590",
            "2938211115",
            "3902962894",
            "9300131195",
            "6059141930",
            "1072999590",
            "1825717994",
            "9185076973",
            "5772140286",
            "3168467874",
            "6784821551",
            "6950770361",
            "9135927597",
            "588979977",
            "8874698947",
            "2243880003",
            "1915877003",
            "588979977",
            "3820102590",
            "920371057",
            "3066677875",
            "6782089537",
            "6589751581",
            "2846581843",
            "6002596406",
            "1902273549",
            "360750792",
            "7697959851",
            "1192366669",
            "8968827161",
            "7564499414",
            "6392016233",
            "8425839164",
            "8652273445",
            "1046354699",
            "2032453876",
            "2776762691",
            "9021454218",
            "2047224855",
            "2388976744",
            "2186507241",
            "3726968083",
            "7564499414",
            "1545113066",
            "7612705270",
            "3121595220",
            "645739594",
            "8354804489",
            "8138163915",
            "6605445348",
            "9086272778",
            "5111788645",
            "9324220828",
            "9315290411",
            "1843298493",
            "1673438360",
            "7639600178",
            "9274492920",
            "6828212195",
            "8992295571",
            "7523598733",
            "8530617794",
            "2674988765",
            "2036379539",
            "8783455167",
            "2367864460",
            "2059213913",
            "2590579596",
            "1329506335",
            "2295471435",
            "8686933098",
            "1490024257",
            "7770481345",
            "1665902965",
            "8554581914",
            "8678260265",
            "7792667343",
            "3284088254",
            "5391747697",
            "7654371545",
            "8471827698",
            "870474999",
            "3780792368",
            "2329152202",
            "1200666434",
            "2590579596",
            "893320059",
            "2934824396",
            "5780195971",
            "8421654685",
            "3232848755",
            "9084719843",
            "7956419574",
            "4536246988",
            "7107259376",
            "8939846452",
            "6467236850",
            "6317313771",
            "2457999222",
            "264876118",
            "1735740596",
            "9005415673",
            "511148145",
            "8258780300",
            "235449146",
            "1025043326",
            "8446147509",
            "2450059387",
            "3460370708",
            "7702111529",
            "9215481091",
            "8579349958",
            "8205313467",
            "3886314159",
            "442667174",
            "8112041548",
            "2605207044",
            "6235716829",
            "3608717973",
            "8662959375",
            "4308173360",
            "8840913643",
            "1502745155",
            "7386780309",
            "598279972",
            "7182725766",
            "5022816698",
            "9254079514",
            "8493841921",
            "8855521323",
            "753551827",
            "7867737294",
            "2505983579",
            "9115623266",
            "717812336",
            "598279972",
            "8683163965",
            "9207901458",
            "6598422001",
            "7721022645",
            "4011371584",
            "7574712690",
            "555394924",
            "9108293836",
            "8143440501",
            "8166662606",
            "1761128408",
            "8709707255",
            "3625147403",
            "753070823",
            "8245163185",
            "8068134006",
            "8633873528",
            "8627313851",
            "7694198596",
            "705774542",
            "2364837016",
            "9079283605",
            "1910668369",
            "8147100629",
            "1685066290",
            "892312715",
            "7678731584",
            "3804555884",
            "8394993902",
            "2874591039",
            "1598501866",
            "9314640432",
            "7044942526",
            "7802473463",
            "6717681051",
            "2996506776",
            "9038284272",
            "3150408979",
            "3632679326",
            "3212282392",
            "7002187730",
            "7432527330",
            "2119447596",
            "8870127487",
            "8130825458",
            "6628837542",
            "4923612380",
            "2539714701",
            "3100406518",
            "9202481923",
            "6572697062",
            "373666769",
            "6664441264",
            "9164708431",
            "9143148644",
            "7943682670",
            "8129790979",
            "2894231520",
            "2626776155",
            "8796237672",
            "950295540",
            "787592452",
            "3930031308",
            "2474530250",
            "2474530250",
            "2289338881",
            "8129507876",
            "3158362784",
            "7802473463",
            "8346302332",
            "7573768547",
            "5543571097",
            "2101852805",
            "201079007",
            "2043506072",
            "1281254012",
            "8698639688",
            "5480269651",
            "9162924740",
            "7948777717",
            "9038583636",
            "3494480285",
            "3229806843",
            "1988834475",
            "2735995000",
            "4377825305",
            "9162853606",
            "3799847214",
            "1857962430",
            "8549243366",
            "2993222813",
            "1440347620",
            "3182030160",
            "2027580521",
            "3110069001",
            "2188784654",
            "5759467408",
            "1952544553",
            "7404203813",
            "7653996206",
            "5641804655",
            "7141267029",
            "2030123748",
            "8939552410",
            "5959300216",
            "7891950478",
            "8576198505",
            "58773368",
            "2590579596",
            "6835108708",
            "6198638280",
            "3007980464",
            "8275745018",
            "2917629568",
            "8052191193",
            "7440862241",
            "7197022313",
            "9020004366",
            "2420521023",
            "978236155",
            "8594358050",
            "6030678691",
            "9190614699",
            "234064551",
            "2385707295",
            "2695220218",
            "4104943036",
            "3754736730",
            "8542024104",
            "891524698",
            "2051674526",
            "2455092758",
            "866630421",
            "7945614710",
            "9015383808",
            "6158803531",
            "3772313579",
            "9158873452",
            "1688670973",
            "827895824",
            "8312860222",
            "525983941",
            "3928865325",
            "472817033",
            "2739714092",
            "9059119156",
            "6382640303",
            "1802018378",
            "9001651066",
            "7997858733",
            "778330454",
            "1856049929",
            "7998220811",
            "8301317724",
            "9294348553",
            "1802018378",
            "7997858733",
            "7613500518",
            "3252268228",
            "7612675948",
            "8949550988",
            "6808174198",
            "8662871160",
            "2026970468",
            "3946255525",
            "1343278444",
            "4237681455",
            "3017686299",
            "1008106344",
            "581820157",
            "9262807689",
            "1332177738",
            "6847165921",
            "819154977",
            "2502468630",
            "7016349847",
            "7223106922",
            "1965858198",
            "8851370522",
            "9250579884",
            "7039335895",
            "8876673058",
            "7537329726",
            "6837003405",
            "1287981331",
            "1827775606",
            "240052754",
            "8971869265",
            "1501934705",
            "901909437",
            "2739823512",
            "8011695247",
            "8775000045",
            "8178345462",
            "1578151077",
            "2216879630",
            "726110610",
            "5128247272",
            "2283899491",
            "8941419100",
            "8822312495",
            "8743352088",
            "3583456721",
            "7145741838",
            "3746631277",
            "9336815007",
            "8424708979",
            "8946798434",
            "8712064007",
            "6963710423",
            "2245023092",
            "380775652",
            "8769675955",
            "9160651554",
            "707716636",
            "3586239999",
            "583797681",
            "493226754",
            "2001424253",
            "2903695693",
            "2032814323",
            "2483459218",
            "9350491516",
            "7757409149",
            "1799850018",
            "6851188486",
            "3155258592",
            "2718688967",
            "8413853674",
            "1775019268",
            "240052754",
            "2041616337",
            "2975525956",
            "7570639828",
            "2612479750",
            "8264785608",
            "8851305677",
            "8569674405",
            "8470778695",
            "1741310531",
            "333174101",
            "2412504529",
            "231080726",
            "3074066165",
            "6221167881",
            "8140206534",
            "8814582960",
            "3124872133",
            "1682613472",
            "300277541",
            "9143898548",
            "240052754",
            "8248421387",
            "4420414062",
            "2032868138",
            "9012010510",
            "863437123",
            "7287520602",
            "4405806672",
            "7459536256",
            "9208809485",
            "2753929992",
            "1955894932",
            "9021511403",
            "9190614699",
            "8880973703",
            "2879007849",
            "1034824195",
            "5174491739",
            "7655157930",
            "9092624820",
            "2295017480",
            "8573173247",
            "735098152",
            "7900354568",
            "7766104705",
            "4495809140",
            "2715794352",
            "8698060690",
            "6059958761",
            "714376373",
            "1995058251",
            "7656624194",
            "2388248836",
            "9224889031",
            "8333720971",
            "9172879452",
            "1188321987",
            "5196659594",
            "5062500458",
            "1293327331",
            "9333887587",
            "8815307123",
            "863172667",
            "2380488153",
            "2134210597",
            "5321435524",
            "9018104985",
            "7207705450",
            "8125932604",
            "9339962000",
            "9225259702",
            "7232456114",
            "8854334066",
            "2629134339",
            "1966274764",
            "1542112683",
            "147797128",
            "9345507547",
            "6460977321",
            "4791162121",
            "8425278178",
            "8524111917",
            "9219951841",
            "7426461192",
            "767337394",
            "2486156801",
            "1645401936",
            "9334717238",
            "2963658129",
            "7613502272",
            "2772855899",
            "3501394674",
            "1684684824",
            "8561960873",
            "1680813966",
            "9166377853",
            "6754879604",
            "9113589367",
            "6495331265",
            "1056534524",
            "2175291043",
            "8881245778",
            "7771326502",
            "8508106096",
            "1890295017",
            "7780763915",
            "6574618481",
            "2121370444",
            "7716784435",
            "199150403",
            "307918328",
            "6933772575",
            "7331499223",
            "8175974188",
            "2872347884",
            "1686913490",
            "1697410455",
            "8891687860",
            "8175974188",
            "7929495074",
            "1946196746",
            "1446050397",
            "1825966610",
            "6715273648",
            "1753447506",
            "5333438441",
            "7435823448",
            "1686913490",
            "7469355954",
            "9103709487",
            "9196361767",
            "2483363525",
            "6577314403",
            "8605752624",
            "8513157370",
            "2782238768",
            "1018240803",
            "2468684149",
            "7617595562",
            "7924403795",
            "2707586187",
            "6323543789",
            "7212297140",
            "678839830",
            "2641229265",
            "648883259",
            "7391923101",
            "8774432485",
            "9115030751",
            "6183233076",
            "2548558587",
            "7536957762",
            "8799678028",
            "9059431710",
            "1858138469",
            "7559712566",
            "6563527259",
            "479333267",
            "1913298930",
            "6658510787",
            "7967507801",
            "2215491472",
            "6183233076",
            "2008836213",
            "205273541",
            "2495229695",
            "7963762318",
            "9237465614",
            "6778032672",
            "6157397044",
            "2495229695",
            "9165739106",
            "2965240829",
            "7817423376",
            "1739181919",
            "7041891772",
            "3162444635",
            "7054828359",
            "7603051418",
            "8193137040",
            "8900418285",
            "7751537172",
            "6951370015",
            "9316916676",
            "1761831773",
            "9244256111",
            "2081653048",
            "9081539542",
            "8233446028",
            "4452183368",
            "2028106539",
            "9247005581",
            "7044419433",
            "8780009803",
            "1594230076",
            "8480639745",
            "3100406518",
            "9224889031",
            "4771867402",
            "7409710281",
            "153755337",
            "6947227703",
            "7878620105",
            "8842454912",
            "3314691909",
            "8346684726",
            "2635487253",
            "2392273946",
            "8333190905",
            "682203388",
            "712836465",
            "3787107005",
            "3509973259",
            "8927925521",
            "8449546621",
            "9178615314",
            "2635487253",
            "1465743194",
            "4161304424",
            "4143762088",
            "8153902966",
            "7154984237",
            "9151302196",
            "2787687722",
            "9112654539",
            "2102766276",
            "3187551011",
            "2690758096",
            "9042053507",
            "7929966568",
            "7154984237",
            "2520058524",
            "7883270935",
            "553669970",
            "503182967",
            "1906554641",
            "3921056863",
            "3717866679",
            "1038966222",
            "6913751897",
            "9345511509",
            "7155008623",
            "1238465810",
            "2963333024",
            "4699650151",
            "2440105040",
            "2302118666",
            "3798460522",
            "2883219736",
            "7361737374",
            "5659286030",
            "9214460821",
            "1825500637",
            "2383650548",
            "927897585",
            "3017562906",
            "8718925620",
            "1658565641",
            "7766438144",
            "2556730735",
            "8656942358",
            "687978522",
            "2651206992",
            "6838397740",
            "3655034692",
            "6706454192",
            "1786517110",
            "9334273092",
            "2560141874",
            "8989277453",
            "8424258318",
            "2148248008",
            "7382419540",
            "1759348228",
            "2825474811",
            "6540161868",
            "1952569243",
            "616791568",
            "9311727071",
            "106412145",
            "1967651997",
            "9341521391",
            "9083729520",
            "2645258643",
            "8467931774",
            "6797022537",
            "6390836454",
            "7357521694",
            "8925562126",
            "5983148706",
            "1634299044",
            "1790885477",
            "1893488460",
            "1169550805",
            "4100883751",
            "7492618509",
            "862446421",
            "2071912640",
            "3126883462",
            "2059717642",
            "1817063682",
            "2452819354",
            "9083729520",
            "564278696",
            "382604193",
            "4088500000",
            "2667851582",
            "2877958957",
            "6724793445",
            "1954531449",
            "6099361970",
            "8900544410",
            "7628947927",
            "2272486225",
            "7961482176",
            "5645862223",
            "8435214747",
            "9298634715",
            "8832448465",
            "8983834461",
            "519239645",
            "9002754491",
            "2074725578",
            "2046331694",
            "1181173152",
            "2996550756",
            "7897403876",
            "9250413882",
            "1331177209",
            "2991459102",
            "8840913643",
            "8197302019",
            "9159636090",
            "2721929109",
            "7606416846",
            "8709145252",
            "8787686917",
            "884034536",
            "8478656049",
            "3117112374",
            "2112045127",
            "1716755890",
            "4293023805",
            "2016430441",
            "7104562886",
            "8910791881",
            "4341973502",
            "651834391",
            "3598348873",
            "1722945757",
            "7961482176",
            "3120464343",
            "8908319988",
            "2599499076",
            "8674916711",
            "958673849",
            "1782400680",
            "7693531425",
            "630783312",
            "2750779110",
            "3901213400",
            "5521118905",
            "2126059394",
            "8092731099",
            "7814291125",
            "1810434433",
            "3310060938",
            "3211764447",
            "1228934510",
            "7965639419",
            "5477163696",
            "7668379484",
            "8295376600",
            "1810434433",
            "5787351203",
            "671457476",
            "7728366902",
            "7300159390",
            "4237681455",
            "2604878405",
            "4778999873",
            "2343585904",
            "2657878877",
            "791693435",
            "8877728481",
            "8612135924",
            "4108772688",
            "2422410943",
            "5692797069",
            "1737718969",
            "3220970004",
            "9346187500",
            "8387228525",
            "9349431203",
            "1857885499",
            "3411507511",
            "2856421347",
            "2441538954",
            "6439015584",
            "2380363479",
            "8546087074",
            "955383454",
            "9080522879",
            "902043633",
            "7588036024",
            "7357521694",
            "2281801722",
            "2178747611",
            "2300685778",
            "8920646578",
            "2074904980",
            "2018631512",
            "2101010863",
            "1673292365",
            "2520582935",
            "9176832821",
            "1645045930",
            "6762051910",
            "7726318671",
            "567165571",
            "1698615974",
            "2251841806",
            "2156699889",
            "1673292365",
            "2229055842",
            "5751330287",
            "7544708610",
            "7357521694",
            "2518583301",
            "9183414635",
            "8777763461",
            "6661362277",
            "7874161741",
            "1400970936",
            "2156699889",
            "8056403758",
            "2156699889",
            "9226311736",
            "568935968",
            "8276917016",
            "8698274175",
            "1766972532",
            "8636690957",
            "7560809499",
            "6439508328",
            "2577963000",
            "3859121738",
            "8288175631",
            "2151424556",
            "734676368",
            "7568942700",
            "2211879504",
            "3754536880",
            "1875371018",
            "7392988932",
            "7356175493",
            "3073361992",
            "2165185055",
            "7693339050",
            "2287347266",
            "856536792",
            "1046354699",
            "666037793",
            "7049819302",
            "7049819302",
            "7693339050",
            "7099818466",
            "1906023071",
            "1906023071",
            "9208457127",
            "8982888064",
            "9005839087",
            "3075483840",
            "2735619600",
            "8775142682",
            "1516239416",
            "7439542158",
            "555011892",
            "6447929246",
            "1439228812",
            "1893914459",
            "9320352792",
            "543753883",
            "7819775358",
            "8565039689",
            "5038358408",
            "2926642446",
            "1594962971",
            "2298800505",
            "2894624815",
            "9215852946",
            "6200494682",
            "444407900",
            "9215852946",
            "2356666495",
            "3625196559",
            "3265744587",
            "467555006",
            "9270130872",
            "1993666505",
            "1173949556",
            "8838172319",
            "6582702376",
            "8607257792",
            "3559931016",
            "646694033",
            "912863231",
            "8627578157",
            "2315197979",
            "7041772791",
            "2471379556",
            "6591863528",
            "1728330467",
            "6591863528",
            "8390976074",
            "3071682419",
            "1253879550",
            "550416701",
            "2875120822",
            "9347914896",
            "6411271647",
            "6411271647",
            "8639956053",
            "8804913452",
            "1094872854",
            "9270130872",
            "953206279",
            "1210818465",
            "8607257792",
            "8124444691",
            "351575095",
            "4175905758",
            "2240752022",
            "3193163956",
            "2365982710",
            "7604276294",
            "7537476204",
            "8607257792",
            "8308094199",
            "7700403667",
            "254786108",
            "2449191725",
            "574529583",
            "4524463929",
            "2661125919",
            "178569869",
            "3080387577",
            "8548942278",
            "1945857658",
            "226907580",
            "3190499544",
            "8465607582",
            "1967857874",
            "5015156625",
            "2590219412",
            "226907580",
            "9167611127"
        ]

        with ThreadPoolExecutor(max_workers=18) as executor:
            for user_id in self.user_ids:
                executor.submit(self.dispatch_request, user_id)

    def dispatch_request(self, user_id: str):
        while True:
            try:
                req = self.available_requests.get(timeout=1)
                break
            except Empty:
                print("All request is busy...")
                time.sleep(1)

        if req:
            self.handle_request(req, user_id)

    def handle_request(self, req, user_id: str) -> str:
        nickname = req.start_request(user_id)
        threading.Thread(target=self.pause_request, args=(req,)).start()
        return nickname

    def pause_request(self, req):
        time.sleep(6)
        self.available_requests.put(req)



class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()

        self.setWindowTitle(' ')
        self.setWindowIcon(QIcon('./src/ff.ico'))  
        self.setStyleSheet('QMainWindow { background-color: #222325; }')
        self.setFixedSize(800, 500)

        pywinstyles.apply_style(self, 'mica')
        pywinstyles.change_title_color(self, color="#b3b3b3")

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        central_layout = QHBoxLayout()
        central_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        central_widget.setLayout(central_layout)

        left_container = QWidget()
        left_layout = QVBoxLayout()
        left_layout.setContentsMargins(0, 0, 0, 0)
        left_container.setLayout(left_layout)

        central_layout.addWidget(left_container)

        signal = Signals()
        setting_frame = SettingFrame()
        utility_frame = UtilityFrame(signal)

        logging_frame = QFrame()
        logging_frame.setFixedWidth(575)
        logging_frame.setFrameShape(QFrame.Shape.NoFrame)
        logging_frame.setStyleSheet('''
            QFrame {
                background-color: #2b2d30;
                border-radius: 15px;
            }
        ''')

        left_layout.addWidget(setting_frame)
        left_layout.addWidget(utility_frame)

        central_layout.addWidget(left_container)
        central_layout.addWidget(logging_frame)

        self.show()  # Panggil show() di akhir __init__() untuk menampilkan jendela



class Signals(QObject):
    refresh_child_ui = pyqtSignal()


class Messages(QWidget):
    def __init__(self, title: str, messages: str, icon: str, auto_close: bool, two_button: bool, todo_function=None):
        super(Messages, self).__init__()

        self.setStyleSheet('''
            QWidget { 
                background-color: #222325; 
                padding-left: 10px;
                padding-right: 10px;
                padding-bottom: 10px;
                padding-top: 0px;
            }
            QLabel { 
                color: #b3b3b3;
                font-size: 12px;
            }
            QPushButton {
                background-color: #3574F0;
                color: white;
                border: none;
                border-radius: 10px;
                padding: 5px 10px;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
            QPushButton:focus {
                outline: none;
            }
        ''')

        pywinstyles.apply_style(self, 'mica')
        pywinstyles.change_title_color(self, color='#b3b3b3')

        pixmap = self.get_icon(icon)
        self.setWindowIcon(QIcon(pixmap))
        self.setWindowTitle(f"     {title}")

        self.setWindowFlags(Qt.WindowType.WindowCloseButtonHint)

        message_label = QLabel(messages)
        message_label.setTextInteractionFlags(Qt.TextInteractionFlag.TextSelectableByMouse)
        message_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        message_label.setWordWrap(True)
        message_label.setMaximumWidth(400)

        button_layout = QHBoxLayout()
        button_layout.addStretch()

        if two_button:
            ok_button = QPushButton('Oke')
            ok_button.setFixedWidth(100)

            if todo_function:
                ok_button.clicked.connect(todo_function)
            else:
                ok_button.clicked.connect(lambda: self.close())

            cancel_button = QPushButton('Batal')
            cancel_button.setFixedWidth(100)

            cancel_button.clicked.connect(lambda: self.close())

            button_layout.addWidget(ok_button)
            button_layout.addWidget(cancel_button)

        else:
            ok_button = QPushButton('Oke')
            ok_button.setFixedWidth(100)
            ok_button.clicked.connect(lambda: self.close())

            button_layout.addWidget(ok_button)

        layout = QVBoxLayout()
        layout.addWidget(message_label)
        layout.addLayout(button_layout)
        layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        self.setLayout(layout)
        self.setFixedSize(self.sizeHint())
        self.setWindowModality(Qt.WindowModality.ApplicationModal)

        self.show()

        if auto_close:
            self.auto_close_timer = QTimer(self)
            self.auto_close_timer.timeout.connect(self.close)
            self.auto_close_timer.start(5000)

    def get_icon(self, icon):
        if icon == "Success":
            return QPixmap('./success.ico')
        elif icon == "Failed":
            return QPixmap('./failed.ico')
        elif icon == "Info":
            return QPixmap('./info.ico')
        else:
            return QPixmap()




class SettingFrame(QFrame):
    def __init__(self):
        super(SettingFrame, self).__init__()
        self.setFixedWidth(200)
        self.setFixedHeight(50)
        self.setFrameShape(QFrame.Shape.NoFrame)
        self.setStyleSheet('QFrame { background-color: #2b2d30; border-radius: 15px; }')

        font_path = os.path.join(os.getcwd(), 'src', 'ClashGrotesk-Medium.otf')

        font_id = QFontDatabase.addApplicationFont(font_path)
        font_family = QFontDatabase.applicationFontFamilies(font_id)[0]

        layout = QVBoxLayout()
        proxy = HoverButton('.\\src\\proxy32.ico', '.\\src\\proxy-hover.ico', '  Proxy')
        proxy.setStyleSheet(
            f'''
            QPushButton {{
                background-color: #2b2d30;
                border-radius: 15px;
                color: #b3b3b3;
                font-size: 12pt;
            }}
            QPushButton:hover {{
                color: #FFFFFF;
            }}
            '''
        )
        proxy.setFont(QFont(font_family, 12))
        proxy.setFixedHeight(50)
        layout.addWidget(proxy)

        layout.setSpacing(0)
        layout.setContentsMargins(0, 0, 0, 0)

        self.setLayout(layout)

        self.show()


class HoverButton(QPushButton):
    def __init__(self, normal_icon_path, hover_icon_path, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.normal_icon = QIcon(normal_icon_path)
        self.hover_icon = QIcon(hover_icon_path)
        self.setIcon(self.normal_icon)

    def enterEvent(self, event):
        self.setIcon(self.hover_icon)
        self.setCursor(QCursor(Qt.CursorShape.PointingHandCursor))
        super().enterEvent(event)

    def leaveEvent(self, event):
        self.setIcon(self.normal_icon)
        self.setCursor(QCursor(Qt.CursorShape.ArrowCursor))
        super().leaveEvent(event)


class UtilityFrame(QFrame):
    def __init__(self, signal):
        super(UtilityFrame, self).__init__()

        self.setFixedWidth(200)
        self.setFrameShape(QFrame.Shape.NoFrame)
        self.setStyleSheet('QFrame { background-color: #2b2d30; border-radius: 15px; }')

        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)

        self.utilityNode = self.UtilityNode(signal)

        layout.addWidget(self.utilityNode)
        self.setLayout(layout)

    class UtilityNode(QTreeWidget):
        def __init__(self, signal):
            super().__init__()
            self.setHeaderHidden(True)
            self.signal = signal
            self.msg = None

            style_sheet = '''
                QTreeWidget::item { color: #b3b3b3; border: none;}
                QTreeWidget::item:selected { background-color: #2e436e; }
                QTreeWidget::item:hover { background-color: #2e436e; }
                QTreeWidget:focus { outline: none; }
            '''

            self.setStyleSheet(style_sheet)

            self.jabber_node = QTreeWidgetItem(self)
            self.jabber_node.setText(0, 'Jabber')
            self.jabber_node.setIcon(0, QIcon('C:/Users/Lenovo/Documents/GitHub/Addon-FreeFire/src/jabber.ico'))

            self.kiosgamer_node = QTreeWidgetItem(self)
            self.kiosgamer_node.setText(0, 'Kiosgamer')
            self.kiosgamer_node.setIcon(0, QIcon('C:/Users/Lenovo/Documents/GitHub/Addon-FreeFire/src/garena-logo.ico'))


            self.model = self.Model()
            self.controller = self.Controller(self, self.model)

            self.controller.load_jabbers_ui()

            self.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
            self.customContextMenuRequested.connect(self.show_context_menu)

        def show_context_menu(self, pos):
            item = self.itemAt(pos)
            if item is not None:
                menu = QMenu()
                menu.setContentsMargins(5, 5, 5, 5)

                menu.setStyleSheet('''
                    QMenu {
                        background-color: #2b2d30;
                        border: 1px solid #4b4d50;
                    }
                    QMenu::item {
                        background-color: #2b2d30;
                        color: #b3b3b3;
                    }
                    QMenu::item:selected {
                        background-color: #2e436e; 
                    }
                ''')

                match item.text(0):
                    case 'Jabber':
                        add_jabber_action = QAction(QIcon('./src/tambah.ico'), 'Tambah', menu)
                        add_jabber_action.triggered.connect(lambda: self.controller.show_jabber_window())
                        add_refresh_action = QAction(QIcon('./src/refresh.ico'), 'Refresh', menu)
                        add_refresh_action.triggered.connect(lambda: self.controller.refresh_data())

                        menu.addAction(add_jabber_action)
                        menu.addAction(add_refresh_action)
                        menu.exec(self.mapToGlobal(pos))

                if item.parent() is not None and item.parent().text(0) == "Jabber" and item.parent().isExpanded():
                    connect_action = menu.addAction(QIcon('on.ico'), 'Connect')
                    disconnect_action = menu.addAction(QIcon('off.ico'), 'Disconnect')
                    setting_action = menu.addAction(QIcon('settings.ico'), 'Setting')
                    log_action = menu.addAction(QIcon('log.ico'), 'Log')
                    delete_action = menu.addAction(QIcon('delete.ico'), 'Hapus')

                    setting_action.triggered.connect(lambda: self.controller.show_setting_window())
                    delete_action.triggered.connect(lambda: self.controller.delete_confirmation('jabber', item))

                menu.exec(self.mapToGlobal(pos))



        class Model:
            def __init__(self):
                self.jabbers_path = os.path.join(os.getcwd(), 'jabbers.pkl')
                if not os.path.exists(self.jabbers_path):
                    with open(self.jabbers_path, 'wb') as f:
                        data = {
                            "data": []
                        }
                        cPickle.dump(data, f)
                else:
                    self.jabbers = self.load_jabbers()
                    print(self.jabbers)

            def delete(self, type: str, name: str):
                if type == 'jabber':
                    with open(self.jabbers_path, 'rb') as f:
                        data = cPickle.load(f)

                    target_index = None
                    for index, item in enumerate(data['data']):
                        if item.get('label') == name:
                            target_index = index
                            break

                    if target_index is not None:
                        del data['data'][target_index]

                    with open(self.jabbers_path, 'wb') as f:
                        cPickle.dump(data, f)

            def load_jabbers(self) -> list:
                with open(self.jabbers_path, 'rb') as f:
                    data = cPickle.load(f)

                if len(data.get('data')) > 0:
                    jabbers = [x['label'] for x in data.get('data')]
                    return jabbers
                else:
                    return []

            def save_jabber(self, label: str, username: str, password: str, window) -> None:
                with open(self.jabbers_path, 'rb') as f:
                    data = cPickle.load(f)

                new_entry = {
                    'label': label,
                    'username': username,
                    'password': password
                }

                data['data'].append(new_entry)
                with open(self.jabbers_path, 'wb') as f:
                    cPickle.dump(data, f)

            def get_jabber_info(self, label: str):
                with open(self.jabbers_path, 'rb') as f:
                    data = cPickle.load(f)

                for item in data['data']:
                    if item['label'] == label:
                        return {'username': item['username'], 'password': item['password']}

                return None

            def get_all_jabbers(self):
                return self.jabbers


        class Controller:
            refresh_ui_signal = pyqtSignal()
            
            def __init__(self, view, model):
                self.view = view
                self.model = model
                self.jabber_window = None
                self.setting_window = None
                self.view.signal.refresh_child_ui.connect(self.load_jabbers_ui)

            def load_jabbers_ui(self):
        
                self.view.jabber_node.takeChildren()
                for jabber in self.model.jabbers:
                    child = QTreeWidgetItem()
                    child.setText(0, jabber)
                    child.setIcon(0, QIcon('disconnect.ico'))  
                    self.view.jabber_node.addChild(child)

            def refresh_data(self):
                self.model.load_jabbers()  # Reload data jabber dari file
                self.load_jabbers_ui()  

            def delete_confirmation(self, type, item):
                self.view.msg = Messages(
                    'Confirmation', f'Hapus jabber {item.text(0)} ?', 'Info',
                    False, True, lambda: self.delete(type, item.text(0), self.view.msg))

            def delete(self, type: str, name: str, msg):
                self.model.delete(type, name)
                self.view.signal.refresh_child_ui.emit()
                msg.close()

            def save_jabber(self, label: str, username: str, password: str):
                self.model.save_jabber(label, username, password, self.jabber_window)
                self.refresh_data() 
                if self.jabber_window:
                 self.jabber_window.close() 
        

            def show_jabber_window(self):
                self.jabber_window = QWidget()
                self.jabber_window.setFixedSize(250, 180)
                self.jabber_window.setWindowTitle('Jabber')
                self.jabber_window.setWindowIcon(QIcon('jabber.ico')) 

                self.jabber_window.setStyleSheet('QWidget { background-color: #222325; }')
                pywinstyles.apply_style(self.jabber_window, 'mica')
                pywinstyles.change_title_color(self.jabber_window, color="#b3b3b3")

                style = '''
                    QLineEdit {
                        background-color: #2b2d30;
                        color: #b3b3b3;
                        border: 1px solid #202020;
                        border-radius: 10px;
                        padding: 5px;
                        margin: 0px;  /* Ensure there is no margin */
                    }
                '''
                button_style = '''
                    QPushButton {
                        background-color: #3574F0;
                        color: white;
                        border: none;
                        border-radius: 10px;
                        padding: 5px 10px;
                    }
                    QPushButton:hover {
                        background-color: #0056b3;
                    }
                    QPushButton:focus {
                        outline: none;
                    }
                '''

                label_edit = QLineEdit()
                label_edit.setStyleSheet(style)
                label_edit.setPlaceholderText('Nama')

                username_edit = QLineEdit()
                username_edit.setStyleSheet(style)
                username_edit.setPlaceholderText('Username')

                password_edit = QLineEdit()
                password_edit.setEchoMode(QLineEdit.EchoMode.Password)
                password_edit.setStyleSheet(style)
                password_edit.setPlaceholderText('Password')

                save_button = QPushButton('Tambah')
                save_button.setStyleSheet(button_style)

                cancel_button = QPushButton('Batal')
                cancel_button.setStyleSheet(button_style)

                form_layout = QFormLayout()
                form_layout.setContentsMargins(5, 5, 5, 0)
                form_layout.addRow('Nama', label_edit)
                form_layout.addRow('Username', username_edit)
                form_layout.addRow('Password', password_edit)

                button_layout = QHBoxLayout()
                button_layout.setContentsMargins(5, 0, 5, 5)
                button_layout.addWidget(save_button)
                button_layout.addWidget(cancel_button)

                main_layout = QVBoxLayout()
                main_layout.addLayout(form_layout)
                main_layout.addLayout(button_layout)

                self.jabber_window.setLayout(main_layout)

                cancel_button.clicked.connect(lambda: self.jabber_window.close())
                save_button.clicked.connect(lambda: self.save_jabber(label_edit.text(), username_edit.text(), password_edit.text()))


                self.jabber_window.show()


            def show_setting_window(self):
                self.setting_window = QWidget()
                self.setting_window.setFixedSize(300, 200)
                self.setting_window.setWindowTitle('Setting')
                self.setting_window.setWindowIcon(QIcon('C:/Users/Lenovo/Documents/GitHub/Addon-FreeFire/src/settings.ico'))
                self.setting_window.setStyleSheet('QWidget { background-color: #222325; }')
                pywinstyles.apply_style(self.setting_window, 'mica')
                pywinstyles.change_title_color(self.setting_window, color="#b3b3b3")

                # Buat layout sebagai atribut self
                self.layout = QVBoxLayout()

                jabber_list_widget = QListWidget()
                jabber_list_widget.setStyleSheet('''
                    QListWidget {
                        background-color: #2b2d30;
                        color: #b3b3b3;
                        border: 1px solid #4b4d50;
                    }
                    QListWidget::item {
                        background-color: #2b2d30;
                    }
                    QListWidget::item:selected {
                        background-color: #2e436e; 
                    }
                ''')

                for jabber in self.model.jabbers:
                    jabber_list_widget.addItem(jabber)

                def update_displayed_info(item):
                    if item is not None:
                        jabber_label = item.text()
                        jabber_info = self.model.get_jabber_info(jabber_label)  # Pastikan ini mengambil info yang tepat

                        # Clear existing layout
                        while self.layout.count():
                            child = self.layout.takeAt(0)
                            if child.widget():
                                child.widget().deleteLater()

                        if jabber_info:
                            username_label = QLabel(f"Username: {jabber_info['username']}")
                            password_label = QLabel(f"Password: {jabber_info['password']}")

                            self.layout.addWidget(username_label)
                            self.layout.addWidget(password_label)

                jabber_list_widget.itemSelectionChanged.connect(lambda: update_displayed_info(jabber_list_widget.currentItem()))

                # Close button
                close_button = QPushButton('Tutup')
                close_button.setStyleSheet('''
                    QPushButton {
                        background-color: #3574F0;
                        color: white;
                        border: none;
                        border-radius: 10px;
                        padding: 5px 10px;
                    }
                    QPushButton:hover {
                        background-color: #0056b3;
                    }
                    QPushButton:focus {
                        outline: none;
                    }
                ''')
                close_button.clicked.connect(self.setting_window.close)

                # Add widgets to layout
                self.layout.addWidget(jabber_list_widget)
                self.layout.addWidget(close_button)

                # Set layout for setting window
                self.setting_window.setLayout(self.layout)
                self.setting_window.show()


def except_hook(cls, exception, traceback):
    """
    Fungsi kait penanganan pengecualian kustom.
    """
    # Tangani pengecualian di sini, contohnya dengan mencatat log
    print(f"Terjadi pengecualian: {exception}")


if __name__ == "__main__":
    sys.excepthook = except_hook

    if sys.platform.startswith('win'):
        multiprocessing.freeze_support()

    app = QApplication(sys.argv)

    window = MainWindow()
    window.show()
    

    sys.exit(app.exec())

